- Matchmaking
	- handle leaving a game properly
	- handle leaving a lobby
	- player level column in list
	- class switching
	- in lobby, fix Team == None font/background color issue
	- Give players a team if they join after 40 seconds
	
- Gameplay
	- GUI
		- Weapons/Equipment
		- Health
		- Item slot
		- ammo bar
		- game score
	- AI
		- pathfinding
		- behavior trees
	- Collision
		- Walls
	- Maps
		- 1 map 
			- TDM flags
			- spawns
			- graveyard site.
	- Sound
	- Fog of War
	- Client predictive state
	
- Accounts
	- if password fail, delete account object
	
- Drawing
	- move drawH, drawW, and rotation to TransformComponent (from position component)
	- get rid of Image class
	
- Server
	- consolidate JSON reading function
	- Read maps on start up, same as images
	- store class data in JSON file
		- name, speed, visibility, max health
		- equipment/weapon slots
	- only send data about visible characters to client
	
- finish dealing with flag object
	- Character needs a way to inform database of player kills on death.
		- Perhaps just a way to send a message from a component to the game it's entity belongs to
		- The data would be the GameEventsEntity
		- Also look into Listener design pattern
		- A GameEventReporterComponent which listens for ComponentMessages on an entity and interacts appropriately with the DB/Game.
		
- finish dealing with projectile entities
	- ArtilleryShell creates two objects on lifespan expiration, maybe a subclass of LifespanComponent
	- consider how entities will create/spawn new entities into the game
		- this may also require listener pattern
	- Smoke grenade has a falling projectile, which is disabled after 10 secs
		- Then, after the 10 secs are elapsed, a spawner component is enabled
	
- health component
	- need new interface for HealingDealer
	- is wall (to determine if should use normal or multiplied damage).
	
- Equipment
	- Weapons
		- ShootComponent
		- ReloadComponent
		- AmmoComponent
		- DrawableComponent (for icon)
		- MousePositionListener (for launched weapons)
		
- Component Architecture fixes
	- It would be a good idea to have a mapping of priority for components
		- ex: lifespan component should go first to save on computations.
		- then sort by priority before updating
	- Components can be enabled/disabled
		- When disabled, a component does not update nor have it's JSON value returned.